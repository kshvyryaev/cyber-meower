// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/kshvyryaev/cyber-meower-meower-service/pkg"
	"github.com/kshvyryaev/cyber-meower-meower-service/pkg/command"
	controller2 "github.com/kshvyryaev/cyber-meower-meower-service/pkg/controller/grpc"
	"github.com/kshvyryaev/cyber-meower-meower-service/pkg/controller/http"
	"github.com/kshvyryaev/cyber-meower-meower-service/pkg/event"
	"github.com/kshvyryaev/cyber-meower-meower-service/pkg/repository"
	"github.com/kshvyryaev/cyber-meower-meower-service/pkg/service"
)

// Injectors from wire.go:

func InitializeHttpServer() (*controller.HttpServer, func(), error) {
	config := pkg.ProvideConfig()
	meowTranslatorService := service.ProvideMeowTranslatorService()
	logger, cleanup, err := pkg.ProvideZap()
	if err != nil {
		return nil, nil, err
	}
	db, cleanup2, err := repository.ProvidePostgres(config, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	postgresMeowRepository := repository.ProvidePostgresMeowRepository(db)
	encodedConn, cleanup3, err := event.ProvideNats(config)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	natsMeowEventPublisher, cleanup4, err := event.ProvideNatsMeowEventPublisher(encodedConn)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	сreateMeowCommandHandler := command.ProvideСreateMeowCommandHandler(meowTranslatorService, postgresMeowRepository, natsMeowEventPublisher)
	httpMeowController := controller.ProvideHttpMeowController(сreateMeowCommandHandler)
	httpErrorHandlerMiddleware := controller.ProvideHttpErrorHandlerMiddleware(logger)
	httpRecoveryHandlerMiddleware := controller.ProvideHttpRecoveryHandlerMiddleware(logger)
	httpServer := controller.ProvideHttpServer(config, httpMeowController, httpErrorHandlerMiddleware, httpRecoveryHandlerMiddleware)
	return httpServer, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

func InitializeGrpcServer() (*controller2.GrpcServer, func(), error) {
	config := pkg.ProvideConfig()
	meowTranslatorService := service.ProvideMeowTranslatorService()
	logger, cleanup, err := pkg.ProvideZap()
	if err != nil {
		return nil, nil, err
	}
	db, cleanup2, err := repository.ProvidePostgres(config, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	postgresMeowRepository := repository.ProvidePostgresMeowRepository(db)
	encodedConn, cleanup3, err := event.ProvideNats(config)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	natsMeowEventPublisher, cleanup4, err := event.ProvideNatsMeowEventPublisher(encodedConn)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	сreateMeowCommandHandler := command.ProvideСreateMeowCommandHandler(meowTranslatorService, postgresMeowRepository, natsMeowEventPublisher)
	grpcMeowController := controller2.ProvideGrpcMeowController(сreateMeowCommandHandler)
	grpcErrorHandlerInterceptor := controller2.ProvideGrpcErrorHandlerInterceptor(logger)
	grpcServer := controller2.ProvideGrpcServer(config, grpcMeowController, grpcErrorHandlerInterceptor)
	return grpcServer, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
