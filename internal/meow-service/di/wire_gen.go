// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/kshvyryaev/cyber-meower/internal/meow-service/command"
	"github.com/kshvyryaev/cyber-meower/internal/meow-service/config"
	"github.com/kshvyryaev/cyber-meower/internal/meow-service/controller/http"
	"github.com/kshvyryaev/cyber-meower/internal/meow-service/repository"
	"github.com/kshvyryaev/cyber-meower/internal/meow-service/service"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func InitializeHttpServer(logger *zap.Logger) (*controller.HttpServer, func(), error) {
	configConfig := config.ProvideConfig()
	meowTranslatorService := service.ProvideMeowTranslatorService()
	postgresConnection, cleanup, err := repository.ProvidePostgresConnection(configConfig, logger)
	if err != nil {
		return nil, nil, err
	}
	postgresMeowRepository := repository.ProvidePostgresMeowRepository(postgresConnection)
	сreateMeowCommandHandler := command.ProvideСreateMeowCommandHandler(meowTranslatorService, postgresMeowRepository)
	meowController := controller.ProvideMeowController(сreateMeowCommandHandler)
	errorHandlerMiddleware := controller.ProvideErrorHandlerMiddleware(logger)
	recoveryHandlerMiddleware := controller.ProvideRecoveryHandlerMiddleware(logger)
	httpServer := controller.ProvideHttpServer(configConfig, meowController, errorHandlerMiddleware, recoveryHandlerMiddleware)
	return httpServer, func() {
		cleanup()
	}, nil
}
